part 1 is forked from [[https://github.com/xingwangsfu/caffe-yolo][caffe-yolo]]
part 2 is some other works based on part 1

* part 1

** Introduction

This is a caffe implementation of the YOLO:Real-Time Object Detection

Note, the caffe models are not trained in caffe, but converted from darknet's (.weight) files (http://pjreddie.com/darknet/yolo/).

** The converter is consisted of three steps:

- create .prototxt files for caffe from .cfg file in darkent
- initialize the caffe network and weights from .prototxt file, which is generated from darknet's (.cfg) file
- read the weights from pre-trained darknet's (.weight) file
- replace the initialized weights with the weights in pre-trained darkenet's (.weight) file

## Model files

These caffemodel files have been converted for you.


** Usage

- run "create_yolo_prototxt.py" to create .prototxt files
- run "create_yolo_caffemodel.py" to create .caffemodel files
- run "yolo_main.py" to call yolo in caffe

** Convert yolo's (.weight) files to caffemodel 

- first, you need to download the pretrained yolo weight files (http://pjreddie.com/darknet/yolov1/) and .cfg files (https://github.com/pjreddie/darknet/tree/master/cfg/yolov1)

- run create_yolo_prototxt.py to create .prototxt files

- after that, run create_yolo_caffemodel.py to create the caffemodel from yolo's (.weight) files

- "python create_yolo_caffemodel.py -m train_val_prototxt.filename -w yoloweights_filename -o caffemodel_filename"
replace train_val_prototxt.filename with /your/path/to/yolo_train_val.prototxt (yolo_small, yolo_tiny), yoloweights_filename with /your/path/to/yolo.weights (yolo-small, yolo-tiny), and caffemodel_filename with your output caffemodel name,

e.g. "python create_yolo_caffemodel.py -m yolo_train_val.prototxt -w yolo.weights -o yolo.caffemodel"



** Main file usage
run yolo_main.py to do yolo object detection for the input image

#+BEGIN_SRC python
python yolo_main.py -m model_filename -w weight_filename -i image_filename
#+END_SRC

replace model_filename with /your/path/to/yolo_small_deploy.prototxt or yolo_tiny_deploy.prototxt, weight_filename with /your/path/to/yolo_tiny.caffemodel or yolo_small.caffemodel and image_filename with the target image file


** Requirements

- Caffe, pycaffe
- Opencv2



* part 2
** cpp interface
add cpp interface yolo.cpp

** convert coco dateset to voc dataset formate
see details in coco-to-voc-formate.py 

coco is a dataset from MS. You can convert it to voc formate so that you can just use train method provided by darknet-yolo simply.
